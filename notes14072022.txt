public class Data {
   private int num1;
   private int num2;
   
    public void getData(){
	 num1=20;
	 num2=30
	}
	
}

public class DataMain{
 public static void main(String args[]){
 Data data=new Data();
 d.getData();   // From the perspective of DataMain we are not able to directly into
                // implementation 
 }
 }
 ---------------------------------------------------------------
 public class Data {
   int num1;
   int num2;
   
    public void getData(){
	 num1=20;
	 num2=30
	}
	
}

public class DataMain{
 public static void main(String args[]){
 Data data=new Data();
 data.num1=10;
 data.num2=20;
 }
 }
 
 // In the above code we are not having abstraction for storing values in num1 and num2
 
 -------------------------------------------------------------------------------------
 import java.util.Scanner;
 public class Data {
   private int num1;
   private int num2;
   
    public void getData(){
	 Scanner scan=new Scanner(System.in);
	 num1=scan.nextInt();
	 num2=scan.nextInt();
	}
	
}

public class DataMain{
 public static void main(String args[]){
 Data data=new Data();
 d.getData();   // From the perspective of DataMain we are not able to directly into
                // implementation 
 }
 }
 ----------------------------------------------------
 import java.util.Scanner;
 public class Data {
    int num1;
    int num2;
   
   /* public void getData(){
	 Scanner scan=new Scanner(System.in);
	 num1=scan.nextInt();
	 num2=scan.nextInt();
	} */
	
}

public class DataMain{
 public static void main(String args[]){
 Data data=new Data();
 Scanner scan=new Scanner(System.in);
 	 data.num1=scan.nextInt();
	 data.num2=scan.nextInt();
 }
 }
 ------------------------------------------------------------------------------------------
 Abstraction is implemented through 
 * Abstract class
 * Interface
 The abstract keyword signifies that something is not complete. It can be used with
 classes and methods.
 
 An abstract class is a class that is incomplete. It cannot be instantiated.
For it to be used, an abstract class has to be made complete by extending it.

abstract class Shape{}

Shape shape=new Shape(); // So I cannot create an object of abstract class because 
the class is incomplete.

abstract class Shape{

abstract float areaCalculate(); // A class containing an abstract method is declared as
// abstract. Abstract method dont have implementation. 

}

A class having atleast one abstract method should be 
declared as abstract. But it is also possible that we
declare a class as an abstract without having an abstract
method.

abstract class MyAbstractClass {}

----------------------------------------------------------------------------
Abstract class are the Parent class which should be sub-classed.

abstract class Shape {
 protected float x;
 protected float y;
 
 public void setX(float x){
  this.x=x;
 }
 
 public float getX(){
 return x;
 }
 
 public abstract float calculateArea();
 
}

// When a class which is not an abstract class ( concrete class ) is inheriting an
// abstract class , it needs to override the abstract method of the abstract class.
public class Triangle extends Shape {

public float calculateArea(){
 float area=(x*y)/2;
 return area;
}

}
---------------------------------------------------------------------------------

abstract class Shape {
 protected float x;
 protected float y;
 
 public void setX(float x){
  this.x=x;
 }
 
 public float getX(){
 return x;
 }
 
 public abstract float calculateArea();
 
}

// Suppose the subclass is not implementing the abstract method of
// abstract class, the sub class also needs to be declared
// as an abstract otherwise it will show compilation error.
// So to convey to the compiler that this class is also incomplete as in the
// sense it failed in implementing/overriding the abstract method of the abstract class
// which it inherited.
public abstract class Triangle extends Shape {



}
----------------------------------------------------------------------------------------
A class can be abstract even without any abstract methods.
--------------------------------------------------------------------------------------------
Abstract class should be inherited otherwise
the abstract class is useless as we cannot create
an object of abstract.
---------------------------------------------------------------
If we are implementing an interface,
we have to override all the abstract method/methods
of an interface. If we are not doing so, we have
declare the class as abstract.

public interface Calculator {
 int add(int a,int b);
 int subtract(int a,int b);
 }
 
 public class Number implements Calculator{
 
 public int add(int a,int b){
 return a+b;
 }
 
 public int subtract(int a,int b){
 return a-b;
 }
 
 
 
 }
 
 ------------------------------------------
 
 public abstract class Number implements Calculator{
 
 public int add(int a,int b){
 return a+b;
 }
  
 
 }
 
 public class SubNumber extends Number {
 public int subtract(int a,int b){
 return a-b;
 }
 
 }
 -------------------------------------------------------------------------------
 Interface is a type.
 Interface is a non primitive type. 
 Interface provides the methods which the class needs to implement.If we are making the class
 to implement the interface.
 Interface variables are public, static and final.
 Interface methods are public and abstract.
 We cannot create an object interface.
 But interface reference variable can be created which can store the reference of the
 object of the class which has implemented the interface.
 The class which is implementing the interface can have its own method. 
 
 public interface ICalculator {
  int add(int a,int b);
 }
 
 public class Number implements ICalculator {
 
public int add(int a,int b){
return a+b;
}

public void display(){
System.out.println("I am the display method");
}

}

public class Tester {
  public static void main(String args[]){
      ICalculator calculator=new Number();  // Type conversion
	  System.out.println(calculator.add(10,20));
	  calculator.display();  // As we dont have display method in the
	  // calculator we wont be able call.
	  Number number2=(Number)calculator; // type casting
	  number2.display();
	  ((Number)calculator).display();
	  Number number=new Number();
	  System.out.println(number.add(10,20));
	  number.display();
  }
  
  ------------------------------------------------------
  
  default is a keyword which when attached to an interface method, allows 
  us to provide an implementation for that method. With this, we can add 
  additional methods in any interface without disturbing the classes which 
  have already implemented the interface. 
  This method can be overridden in the implementing classes if need be.
  ------------------------------------------------------------
  static is another keyword introduced which allow us to provide an implementation
  to the method it is attached to. The difference between static and default is that a
  method having default keyword can be overridden, whereas, one having static cannot.
  
  